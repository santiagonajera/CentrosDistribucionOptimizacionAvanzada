generar un código de optimización avanzada de centros de distribución en Python:

Contexto:
Quiero un script en Python que optimice la ubicación de centros de distribución en Ecuador, considerando datos de clientes (latitud, longitud, demanda mensual y ciudad). El código debe evaluar múltiples escenarios y determinar el número óptimo de centros, minimizando costos de transporte y operativos.
Requisitos Funcionales:


Clase Principal:
Crea una clase llamada OptimizadorCentrosAvanzado que gestione todo el proceso de optimización.
La clase debe inicializarse con una URL de un archivo de datos (ejemplo: GitHub) que contenga información de clientes.



Carga de Datos:
Implementa un método cargar_datos() que descargue y procese los datos desde la URL, almacenándolos en un DataFrame de pandas.
Los datos deben incluir: cliente_id, ciudad, latitud, longitud y demanda_mensual.
Muestra un resumen de los datos cargados (número de clientes por ciudad y demanda total).

Cálculo de Distancias:
Implementa un método calcular_distancia_haversine(lat1, lon1, lat2, lon2) para calcular la distancia geodésica entre dos puntos en kilómetros.


Cálculo de Costos:
Implementa un método calcular_costo_total_escenario(centros, incluir_costos_fijos=True) que calcule el costo total de transporte y fijos para un escenario dado.
Los costos deben incluir:
Costo fijo mensual por centro.
Costo por kilómetro recorrido, ponderado por la demanda de cada cliente.

Escenarios de Optimización:
Escenario 1: Un solo centro nacional, ubicado en el centro geográfico ponderado por demanda.
Escenario 2: Un centro por ciudad principal (Quito, Guayaquil, Cuenca).
Algoritmo P-Median: Usa K-Means ponderado por demanda para encontrar ubicaciones óptimas para un número arbitrario de centros.
Algoritmo Genético: Implementa un algoritmo genético para optimizar la ubicación de los centros, con selección por torneo, cruzamiento uniforme y mutación adaptativa.

Análisis de Trade-off:
Implementa un método analisis_tradeoff_completo() que evalúe de 1 a 8 centros, usando P-Median y Algoritmo Genético.
Calcula métricas como costo total, distancia promedio, eficiencia de costo y cobertura de servicio.
Determina el número óptimo de centros usando una función de utilidad multi-criterio.

Solución Final:
Genera una solución final óptima usando el número de centros determinado en el análisis de trade-off.
Muestra estadísticas detalladas por centro (clientes asignados, distancia promedio, costo de transporte).

Reporte Ejecutivo:
Genera un reporte con los resultados de los escenarios evaluados, la solución óptima y los beneficios económicos (ahorro mensual y anual).

Visualización:
Crea gráficos para visualizar:

Costo total vs. número de centros.
Distancia promedio vs. número de centros.
Distribución de clientes por ciudad.
Score de optimización multi-criterio.

Ejecución Completa:
Implementa un método ejecutar_analisis_completo() que orquestre todo el proceso: carga de datos, evaluación de escenarios, análisis de trade-off, generación de solución final y visualización.

Función Principal:
Crea una función main() que instancie la clase, ejecute el análisis completo y muestre las coordenadas óptimas de los centros.

Librerías a Utilizar:
requests para descargar datos desde GitHub.
pandas y numpy para manipulación de datos.
matplotlib y seaborn para visualización.
scipy.optimize y sklearn.cluster para algoritmos de optimización.
random, math y datetime para utilidades varias.

Detalles Adicionales:
Incluye mensajes de progreso y resultados en la consola para facilitar el seguimiento.
Asegúrate de que el código maneje errores (ejemplo: fallos al descargar datos).
Usa configuraciones ajustables para costos fijos, costos por km, capacidad máxima por centro y factor de penalización por distancia.

Ejemplo de Datos de Entrada:
Los datos deben estar en un archivo de texto en GitHub, con el siguiente formato:
 Copiarcliente_id ciudad latitud longitud demanda_mensual
1 Quito -0.1807 78.4678 1500
2 Guayaquil -2.1962 -79.8862 2000
...
Salida Esperada:
Un script funcional que, al ejecutarse, descargue los datos, evalúe los escenarios, determine la solución óptima y genere un reporte ejecutivo con visualizaciones.

Notas:
El código debe ser modular, legible y bien documentado.
Incluye comentarios para explicar la lógica de los algoritmos y las decisiones de diseño.
Asegúrate de que el código sea reproducible y fácil de adaptar a otros conjuntos de datos o configuraciones de costos.